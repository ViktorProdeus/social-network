{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Friends/Friends.module.css","components/Friends/FriendsItem/FriendsItem.module.css","components/Header/Header.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/Post/Post.module.css","components/News/News.module.css","components/Music/Music.module.css","components/Setting/Settings.module.css","components/SiteBar/SiteBar.module.css","reportWebVitals.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","components/Header/Header.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Setting/Settings.tsx","components/Friends/FriendsItem/FriendsItem.tsx","components/Friends/Friends.tsx","components/SiteBar/SiteBar.tsx","components/Navbar/Navbar.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_POST","UPDATE_NEW_POST_TEXT","initialState","posts","id","v1","message","likeCount","newPostText","profileReducer","state","action","type","newPost","push","undefined","ADD_MESSAGE","UPDATE_NEW_MESSAGE","dialogs","name","messages","user","newMessageText","dialogsReducer","newMessage","friends","sidebarReducer","reducers","combineReducers","profilePage","dialogsPage","siteBar","store","createStore","Header","className","s","header","src","alt","ProfileInfo","preview","wrapper","Post","props","item","MyPosts","postsElements","map","p","newPostElement","useRef","ref","onChange","current","text","value","updateNewPostText","onClick","addPost","MyPostsContainer","getState","dispatch","updateNewPostTextCreator","Profile","profile","News","news","Music","music","Settings","settings","FriendsItem","circle","Friends","friendsElements","title","friendsList","SiteBar","Navbar","nav","to","activeClassName","activeLink","active","DialogItem","path","dialogItem","link","width","height","Message","user1","user2","Dialogs","dialogsElements","d","messagesElements","m","newMessageElement","dialogsItems","listReset","messenger","textareaWrapper","placeholder","updateNewMessageText","submitWrapper","sendMessage","DialogsContainer","updateNewMessageTextCreator","App","render","rerenderEntireTree","ReactDOM","StrictMode","bind","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.a1209913.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Navbar_wrapper__3oknN\",\"nav\":\"Navbar_nav__3j_MG\",\"item\":\"Navbar_item__1OyJD\",\"activeLink\":\"Navbar_activeLink__2Ubgr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__9d_03\",\"listReset\":\"Dialogs_listReset__2DZjo\",\"dialogsItems\":\"Dialogs_dialogsItems__3xfpV\",\"active\":\"Dialogs_active__R-dH6\",\"messages\":\"Dialogs_messages__32clz\",\"messenger\":\"Dialogs_messenger__3HgeR\",\"textareaWrapper\":\"Dialogs_textareaWrapper__18KeY\",\"submitWrapper\":\"Dialogs_submitWrapper__3N8VE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogItem\":\"DialogItem_dialogItem__3VzTr\",\"link\":\"DialogItem_link__2xWDI\",\"active\":\"DialogItem_active__bUNsx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1TnnS\",\"user1\":\"Message_user1__S8wZx\",\"user2\":\"Message_user2__2h3_T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProfileInfo_wrapper__2TN9j\",\"preview\":\"ProfileInfo_preview__2NOY3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MyPosts_wrapper__3pZ18\",\"posts\":\"MyPosts_posts__3GeRT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Friends_title__18mMj\",\"friendsList\":\"Friends_friendsList__200-J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"FriendsItem_item__2fAi-\",\"circle\":\"FriendsItem_circle__1Hy3A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1tXis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__1U4Qr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2ZpOe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"news\":\"News_news__3q4B5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"music\":\"Music_music__14jij\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__1Twb_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"siteBar\":\"SiteBar_siteBar__UVcXu\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {v1} from \"uuid\";\r\nimport {PostType} from \"../components/Profile/MyPosts/Post/Post\";\r\nimport {ActionType} from \"./redux-store\";\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\n\r\nexport type ProfilePageType = {\r\n    posts: PostType[]\r\n    newPostText: string\r\n}\r\n\r\nlet initialState: ProfilePageType = {\r\n    posts: [\r\n        {id: v1(), message: 'Hi, how are you?', likeCount: 3},\r\n        {id: v1(), message: 'How is your it-camasutra?', likeCount: 13},\r\n    ],\r\n    newPostText: ''\r\n\r\n};\r\nconst profileReducer = (state = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost: PostType = {\r\n                id: v1(),\r\n                message: state.newPostText,\r\n                likeCount: 0\r\n            };\r\n\r\n            state.posts.push(newPost);\r\n            state.newPostText = '';\r\n            return state;\r\n\r\n        case UPDATE_NEW_POST_TEXT:\r\n            if (action.newPostText !== undefined) {\r\n                state.newPostText = action.newPostText;\r\n            }\r\n            return state;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const addPostActionCreator = (): ActionType => ({type: 'ADD-POST'});\r\nexport const updateNewPostTextCreator = (text: string): ActionType => ({\r\n    type: UPDATE_NEW_POST_TEXT,\r\n    newPostText: text\r\n});\r\n\r\nexport default profileReducer;","import {v1} from \"uuid\";\r\nimport {MessageType} from \"../components/Dialogs/Message/Message\";\r\nimport {DialogItemType} from \"../components/Dialogs/DialogItem/DialogItem\";\r\nimport {ActionType} from \"./redux-store\";\r\nconst ADD_MESSAGE = \"ADD-MESSAGE\";\r\nconst UPDATE_NEW_MESSAGE = \"UPDATE-NEW-MESSAGE\";\r\n\r\nexport type DialogsPageType = {\r\n    dialogs: DialogItemType[]\r\n    messages: MessageType[]\r\n    newMessageText: string\r\n}\r\n\r\nlet initialState: DialogsPageType = {\r\n    dialogs: [\r\n        {id: v1(), name: 'Dimych'},\r\n        {id: v1(), name: 'Andrey'},\r\n        {id: v1(), name: 'Sveta'},\r\n        {id: v1(), name: 'Sasha'},\r\n        {id: v1(), name: 'Viktor'},\r\n        {id: v1(), name: 'Valera'}\r\n    ],\r\n    messages: [\r\n        {id: v1(), message: 'Hi!', user: 1},\r\n        {id: v1(), message: 'Hi!', user: 2},\r\n        {id: v1(), message: 'How is your it-camasutra?', user: 2},\r\n        {id: v1(), message: 'Perfectly', user: 1},\r\n        {id: v1(), message: 'It\\'s amazing', user: 2},\r\n        {id: v1(), message: 'Thanks', user: 1}\r\n    ],\r\n    newMessageText: ''\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            let newMessage: MessageType = {\r\n                id: v1(),\r\n                message: state.newMessageText,\r\n                user: 2\r\n            };\r\n\r\n            state.messages.push(newMessage);\r\n            state.newMessageText = '';\r\n            return state;\r\n\r\n        case UPDATE_NEW_MESSAGE:\r\n            if (action.newMessageText !== undefined) {\r\n                state.newMessageText = action.newMessageText;\r\n            }\r\n            return state;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const addMessageActionCreator = (): ActionType => ({type: 'ADD-MESSAGE'});\r\nexport const updateNewMessageTextCreator = (text: string): ActionType => ({\r\n    type: UPDATE_NEW_MESSAGE,\r\n    newMessageText: text\r\n});\r\n\r\nexport default dialogsReducer;","import {v1} from \"uuid\";\r\nimport {SiteBarType} from \"../components/SiteBar/SiteBar\";\r\nimport {ActionType} from \"./redux-store\";\r\n\r\nlet initialState: SiteBarType = {\r\n    friends: [\r\n        {id: v1(), name: 'Andrew'},\r\n        {id: v1(), name: 'Sasha'},\r\n        {id: v1(), name: 'Sveta'},\r\n    ]\r\n};\r\n\r\nconst sidebarReducer = (state = initialState, action: ActionType) => {\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer","import {combineReducers, createStore} from \"redux\";\r\nimport profileReducer, {ProfilePageType} from \"./profile-reducer\";\r\nimport dialogsReducer, {DialogsPageType} from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport {SiteBarType} from \"../components/SiteBar/SiteBar\";\r\n\r\nexport type StateType = {\r\n    profilePage: ProfilePageType\r\n    dialogsPage: DialogsPageType\r\n    siteBar: SiteBarType\r\n}\r\n\r\nexport type ActionType = {\r\n    type: 'ADD-POST' | 'UPDATE-NEW-POST-TEXT' | 'ADD-MESSAGE' | 'UPDATE-NEW-MESSAGE'\r\n    newPostText?: string\r\n    newMessageText?: string\r\n}\r\n\r\nexport type StoreType = {\r\n    _state: StateType\r\n    getState: () => StateType\r\n    _callSubscriber: (state: StateType) => void\r\n    subscribe: (observer: (state: StateType) => void) => void\r\n    dispatch: (action: ActionType) => void\r\n}\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    siteBar: sidebarReducer,\r\n});\r\n\r\nlet store: StoreType = createStore(reducers);\r\n\r\nexport default store;","import React from 'react';\r\nimport s from './Header.module.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src='https://www.meme-arsenal.com/memes/e207dd3d241976dcbca5fefcd1bfdc70.jpg' alt={'logo'}/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\nconst ProfileInfo = () => {\r\n    return (\r\n        <div>\r\n            <div className={s.preview}>\r\n                <img src='https://playprint.ru/images/catalog/categories/category-marvel-bg.jpg' alt={'background'}/>\r\n            </div>\r\n\r\n            <div className={s.wrapper}>\r\n                ava + description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://cva.ukzn.ac.za/wp-content/uploads/2019/07/profile-placeholder.png' alt={'avatar'}/>\r\n            {props.message}\r\n            <div>\r\n                <span>&#x2665;</span> {props.likeCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n","import React, {useRef} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post, {PostType} from './Post/Post';\r\n\r\nexport type MyPostsType = {\r\n    updateNewPostText: (text: string) => void\r\n    addPost: () => void\r\n    posts: PostType[]\r\n    newPostText: string\r\n}\r\n\r\nconst MyPosts: React.FC<MyPostsType> = (props) => {\r\n    const postsElements = props.posts.map(p => <Post key={p.id} id={p.id} message={p.message}\r\n                                                     likeCount={p.likeCount}/>);\r\n    const newPostElement: React.RefObject<HTMLTextAreaElement> = useRef<HTMLTextAreaElement>(null);\r\n\r\n    let onAddPost = () => {\r\n        props.addPost();\r\n    }\r\n\r\n    let onPostChange = () => {\r\n        if (newPostElement.current) {\r\n            let text = newPostElement.current?.value;\r\n            props.updateNewPostText(text)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea\r\n                        ref={newPostElement}\r\n                        onChange={onPostChange}\r\n                        value={props.newPostText}\r\n                    />\r\n                </div>\r\n\r\n                <div>\r\n                    <button onClick={onAddPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\nimport {addPostActionCreator, updateNewPostTextCreator} from \"../../../redux/profile-reducer\";\r\nimport {StoreType} from \"../../../redux/redux-store\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\nexport type MyPostsType = {\r\n    store: StoreType\r\n}\r\n\r\nconst MyPostsContainer: React.FC<MyPostsType> = (props) => {\r\n    let state = props.store.getState();\r\n    let addPost = () => {\r\n        props.store.dispatch(addPostActionCreator());\r\n    }\r\n\r\n    let onPostChange = (text: string) => {\r\n        let action = updateNewPostTextCreator(text)\r\n        props.store.dispatch(action);\r\n\r\n    };\r\n\r\n    return (\r\n        <MyPosts\r\n            addPost={addPost}\r\n            updateNewPostText={onPostChange}\r\n            posts={state.profilePage.posts}\r\n            newPostText={state.profilePage.newPostText}\r\n        />\r\n    )\r\n};\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {StoreType} from \"../../redux/redux-store\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nexport type ProfileType = {\r\n    store: StoreType\r\n}\r\n\r\nconst Profile: React.FC<ProfileType> = (props) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo/>\r\n\r\n            <MyPostsContainer store={props.store}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport s from './News.module.css';\r\n\r\nconst News = () => {\r\n    return (\r\n        <div className={s.news}>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;\r\n","import React from 'react';\r\nimport s from './Music.module.css';\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div className={s.music}>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;\r\n","import React from 'react';\r\nimport s from './Settings.module.css';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div className={s.settings}>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;\r\n","import React from 'react';\r\nimport s from './FriendsItem.module.css';\r\n\r\nexport type FriendType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nconst FriendsItem: React.FC<FriendType> = (props) => {\r\n\r\n\r\n    return (\r\n        <li className={s.item}>\r\n            <div className={s.circle}></div>\r\n            {props.name}\r\n        </li>\r\n    )\r\n};\r\n\r\nexport {FriendsItem};","import React from 'react';\r\nimport s from './Friends.module.css';\r\nimport {FriendsItem} from \"./FriendsItem/FriendsItem\";\r\nimport {SiteBarType} from \"../SiteBar/SiteBar\";\r\n\r\nconst Friends: React.FC<SiteBarType> = (props) => {\r\n    const friendsElements = props.friends.map(item => <FriendsItem key={item.id} id={item.id} name={item.name}/>)\r\n\r\n    return (\r\n        <>\r\n            <h2 className={s.title}>Friends</h2>\r\n\r\n            <ul className={s.friendsList}>\r\n                {friendsElements}\r\n            </ul>\r\n        </>\r\n    )\r\n};\r\n\r\nexport {Friends};","import React from 'react';\r\nimport s from './SiteBar.module.css';\r\nimport {Friends} from \"../Friends/Friends\";\r\nimport {FriendType} from \"../Friends/FriendsItem/FriendsItem\";\r\n\r\nexport type SiteBarType = {\r\n    friends: FriendType[]\r\n}\r\n\r\nconst SiteBar: React.FC<SiteBarType> = (props) => {\r\n    return (\r\n        <div className={s.siteBar}>\r\n            <Friends friends={props.friends}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport {SiteBar};","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {SiteBar, SiteBarType} from \"../SiteBar/SiteBar\";\r\n\r\nconst Navbar: React.FC<SiteBarType> = (props) => {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <nav className={s.nav}>\r\n                <div className={s.item}>\r\n                    <NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink>\r\n                </div>\r\n\r\n                <div className={`${s.item} ${s.active}`}>\r\n                    <NavLink to='/dialogs' activeClassName={s.activeLink}>Messages</NavLink>\r\n                </div>\r\n\r\n                <div className={s.item}>\r\n                    <NavLink to='/news' activeClassName={s.activeLink}>News</NavLink>\r\n                </div>\r\n\r\n                <div className={s.item}>\r\n                    <NavLink to='/music' activeClassName={s.activeLink}>Music</NavLink>\r\n                </div>\r\n\r\n                <div className={s.item}>\r\n                    <NavLink to='/settings' activeClassName={s.activeLink}>Settings</NavLink>\r\n                </div>\r\n            </nav>\r\n\r\n            <SiteBar friends={props.friends}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './DialogItem.module.css';\r\n\r\nexport type DialogItemType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<DialogItemType> = (props) => {\r\n\r\n    const path = `/dialogs/${props.id}`;\r\n\r\n    return (\r\n        <li className={s.dialogItem}>\r\n            <NavLink className={s.link} activeClassName={s.active} to={path}>\r\n                <img width=\"30px\" height=\"30px\"\r\n                     src=\"https://cva.ukzn.ac.za/wp-content/uploads/2019/07/profile-placeholder.png\"\r\n                     alt=\"avatar\"/>\r\n                {props.name}\r\n            </NavLink>\r\n        </li>\r\n    )\r\n};\r\n\r\n\r\nexport\r\n{\r\n    DialogItem\r\n}\r\n    ;\r\n","import React from 'react';\r\nimport s from './Message.module.css';\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n    user: number\r\n}\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    let user = props.user === 1 ? s.user1 : s.user2;\r\n\r\n    return (\r\n        <li className={s.message + ' ' + user}>{props.message}</li>\r\n    )\r\n};\r\n\r\nexport {Message};\r\n","import React, {useRef} from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPageType} from \"../../redux/dialogs-reducer\";\r\n\r\n\r\nexport type DialogsType = {\r\n    updateNewMessageText: (text: string) => void\r\n    sendMessage: () => void\r\n    dialogsPage: DialogsPageType\r\n\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsType> = (props) => {\r\n    const dialogsPage = props.dialogsPage;\r\n\r\n    const dialogsElements = dialogsPage.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>);\r\n    const messagesElements = dialogsPage.messages.map(m => <Message key={m.id} id={m.id} user={m.user}\r\n                                                                    message={m.message}/>);\r\n    let newMessageElement = useRef<HTMLTextAreaElement>(null);\r\n\r\n    let addMessage = () => {\r\n        props.sendMessage();\r\n    }\r\n\r\n    let onPostChange = () => {\r\n        if (newMessageElement.current) {\r\n            let text = newMessageElement.current?.value;\r\n            props.updateNewMessageText(text)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={s.dialogs}>\r\n                <ul className={s.dialogsItems + ' ' + s.listReset}>\r\n                    {dialogsElements}\r\n                </ul>\r\n\r\n                <ul className={s.messages + ' ' + s.listReset}>\r\n                    {messagesElements}\r\n                </ul>\r\n            </div>\r\n\r\n            <div className={s.messenger}>\r\n                <div className={s.textareaWrapper}>\r\n                    <textarea\r\n                        placeholder={'...Enter your message'}\r\n                        ref={newMessageElement}\r\n                        value={dialogsPage.newMessageText}\r\n                        onChange={onPostChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className={s.submitWrapper}>\r\n                    <button onClick={addMessage}>Send</button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport {addMessageActionCreator, updateNewMessageTextCreator} from \"../../redux/dialogs-reducer\";\r\nimport {StoreType} from \"../../redux/redux-store\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\nexport type DialogsType = {\r\n    store: StoreType\r\n}\r\n\r\nconst DialogsContainer: React.FC<DialogsType> = (props) => {\r\n    const dialogsPage = props.store.getState().dialogsPage;\r\n    const dispatch = props.store.dispatch;\r\n\r\n    let addMessage = () => {\r\n        dispatch(addMessageActionCreator());\r\n    }\r\n\r\n    let onPostChange = (text: string) => {\r\n        dispatch(updateNewMessageTextCreator(text));\r\n    };\r\n\r\n    return (\r\n        <Dialogs\r\n            updateNewMessageText={onPostChange}\r\n            sendMessage={addMessage}\r\n            dialogsPage={dialogsPage}\r\n        />\r\n    )\r\n};\r\n\r\nexport default DialogsContainer;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header/Header';\r\nimport Profile from './components/Profile/Profile';\r\nimport {Route} from \"react-router-dom\";\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Setting/Settings\";\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport {ActionType, StateType, StoreType} from \"./redux/redux-store\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\n\r\nexport type AppType = {\r\n    store: StoreType\r\n    dispatch: (action: ActionType) => void\r\n    state: StateType\r\n}\r\n\r\nconst App: React.FC<AppType> = (props) => {\r\n\r\n    return (\r\n        <div className='app-wrapper'>\r\n            <Header/>\r\n            <Navbar friends={props.state.siteBar.friends}/>\r\n\r\n            <div className=\"app-wrapper-content\">\r\n                <Route path={'/dialogs'} render={() => <DialogsContainer\r\n                    store={props.store}\r\n                />}\r\n                />\r\n                <Route path={'/profile'} render={() => <Profile\r\n                    store={props.store}\r\n                />}/>\r\n                <Route path={'/news'} render={() => <News/>}/>\r\n                <Route path={'/music'} render={() => <Music/>}/>\r\n                <Route path={'/settings'} render={() => <Settings/>}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store, {StateType} from './redux/redux-store';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nlet rerenderEntireTree = ((state: StateType) => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <HashRouter>\r\n                <App\r\n                    store={store}\r\n                    state={state}\r\n                    dispatch={store.dispatch.bind(store)}\r\n                />\r\n            </HashRouter>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n});\r\n\r\nrerenderEntireTree(store.getState());\r\n\r\nstore.subscribe(()=> {\r\n    let state = store.getState()\r\n    rerenderEntireTree(state);\r\n});\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}